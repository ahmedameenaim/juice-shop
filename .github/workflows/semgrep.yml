# Name of this GitHub Actions workflow.
name: Semgrep

on:
  # Scan changed files in PRs (diff-aware scanning):
  pull_request: {}
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}
  # Scan mainline branches if there are changes to .github/workflows/semgrep.yml:
  push:
    branches:
      - main
      - master
    paths:
      - .github/workflows/semgrep.yml
  # Schedule the CI job (this method uses cron syntax):
  # schedule:
  #   - cron: '20 17 * * *' # Sets Semgrep to scan every day at 17:20 UTC.
  #   # It is recommended to change the schedule to a random time.

permissions:
  contents: read
  pull-requests: write

jobs:
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep/ci
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      - uses: actions/checkout@v4
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep --config auto --json --output semgrep-results.json
        env:
          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.
          # Generate a token from Semgrep AppSec Platform > Settings
          # and add it to your GitHub secrets.
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}


      - name: Process Results via n8n
        id: n8n
        env:
          N8N_WEBHOOK_URL: "https://b4a1-41-233-198-171.ngrok-free.app/webhook-test/e712a312-fafc-4ce7-a115-29522ed26275"
        run: |
          # Send results to n8n and capture response
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d @semgrep-results.json \
            "$N8N_WEBHOOK_URL")
          
          # Parse response and save comments
          echo "$RESPONSE" | jq -r '.comments[]' > comments.txt
          echo "comments=$(cat comments.txt)" >> $GITHUB_OUTPUT
